--- ../../alsa-kernel/pci/hda/hda_beep.c	2015-03-16 14:56:38.666616076 +0100
+++ hda_beep.c	2015-03-16 15:06:17.428601095 +0100
@@ -1,3 +1,5 @@
+#define __NO_VERSION__
+#include "adriver.h"
 /*
  * Digital Beep Input Interface for HD-audio codec
  *
@@ -103,7 +105,11 @@
 static int snd_hda_beep_event(struct input_dev *dev, unsigned int type,
 				unsigned int code, int hz)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 22)
+	struct hda_beep *beep = dev->private;
+#else
 	struct hda_beep *beep = input_get_drvdata(dev);
+#endif
 
 	switch (code) {
 	case SND_BELL:
@@ -127,7 +133,9 @@
 
 static void turn_off_beep(struct hda_beep *beep)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 22)
 	cancel_work_sync(&beep->beep_work);
+#endif
 	if (beep->playing) {
 		/* turn off beep */
 		snd_hda_codec_write(beep->codec, beep->nid, 0,
@@ -143,6 +151,9 @@
 		input_unregister_device(beep->dev);
 	else
 		input_free_device(beep->dev);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 15)
+	kfree(beep->dev);
+#endif
 	beep->dev = NULL;
 	turn_off_beep(beep);
 }
@@ -152,7 +163,11 @@
 	struct input_dev *input_dev;
 	struct hda_codec *codec = beep->codec;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 15)
 	input_dev = input_allocate_device();
+#else
+	input_dev = kzalloc(sizeof(*input_dev), GFP_KERNEL);
+#endif
 	if (!input_dev)
 		return -ENOMEM;
 
@@ -169,7 +184,11 @@
 	input_dev->evbit[0] = BIT_MASK(EV_SND);
 	input_dev->sndbit[0] = BIT_MASK(SND_BELL) | BIT_MASK(SND_TONE);
 	input_dev->event = snd_hda_beep_event;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 22)
 	input_set_drvdata(input_dev, beep);
+#else
+	input_dev->private = beep;
+#endif /* 2.6.22 */ 
 
 	beep->dev = input_dev;
 	return 0;
@@ -275,6 +294,7 @@
 	if (!beep || !beep->dev)
 		return 0;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 15)
 	err = input_register_device(beep->dev);
 	if (err < 0) {
 		codec_err(codec, "hda_beep: unable to register input device\n");
@@ -283,6 +303,9 @@
 		kfree(beep);
 		return err;
 	}
+#else
+	input_register_device(beep->dev);
+#endif
 	beep->registered = true;
 	return 0;
 }

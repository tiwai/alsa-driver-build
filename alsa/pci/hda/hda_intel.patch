--- ../../alsa-kernel/pci/hda/hda_intel.c	2014-02-28 09:00:39.850804004 +0100
+++ hda_intel.c	2014-02-28 12:05:19.806691656 +0100
@@ -1,3 +1,4 @@
+#include "hda_intel_hack.c"
 /*
  *
  *  hda_intel.c - Implementation of primary alsa driver code base
@@ -47,7 +48,9 @@
 #include <linux/reboot.h>
 #include <linux/io.h>
 #include <linux/pm_runtime.h>
+#ifdef HAVE_TIMECOUNTER
 #include <linux/clocksource.h>
+#endif
 #include <linux/time.h>
 #include <linux/completion.h>
 
@@ -422,8 +425,10 @@
 	unsigned int wc_marked:1;
 	unsigned int no_period_wakeup:1;
 
+#ifdef HAVE_TIMECOUNTER
 	struct timecounter  azx_tc;
 	struct cyclecounter azx_cc;
+#endif
 
 	int delay_negative_threshold;
 
@@ -690,6 +695,57 @@
 #define get_azx_dev(substream) (substream->runtime->private_data)
 
 #ifdef CONFIG_X86
+#ifndef CONFIG_HAVE_SET_PAGES_ARRAY
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25) && \
+	LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 29)
+#define set_memory_wc	set_memory_uc
+#define set_pages_wc	set_pages_uc
+#endif
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25) && \
+	LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
+static void set_pages_array_wc(struct page **pages, int num_pages)
+{
+	int i;
+	for (i = 0; i < num_pages; i++)
+		set_pages_wc(pages[i], 1);
+}
+
+static void set_pages_array_wb(struct page **pages, int num_pages)
+{
+	int i;
+	for (i = 0; i < num_pages; i++)
+		set_pages_wb(pages[i], 1);
+}
+#endif /* >= 2.6.25 && < 2.6.23 */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 25)
+static void set_memory_wc(unsigned long addr, int num_pages)
+{
+	change_page_attr(virt_to_page(addr), num_pages, PAGE_KERNEL_NOCACHE);
+	global_flush_tlb();
+}
+static void set_memory_wb(unsigned long addr, int num_pages)
+{
+	change_page_attr(virt_to_page(addr), num_pages, PAGE_KERNEL);
+	global_flush_tlb();
+}
+static void set_pages_array_wc(struct page **pages, int num_pages)
+{
+	int i;
+	for (i = 0; i < num_pages; i++)
+		change_page_attr(pages[i], 1, PAGE_KERNEL_NOCACHE);
+}
+
+static void set_pages_array_wb(struct page **pages, int num_pages)
+{
+	int i;
+	for (i = 0; i < num_pages; i++)
+		change_page_attr(pages[i], 1, PAGE_KERNEL);
+}
+#endif /* < 2.6.25 */
+#endif /* !CONFIG_HAVE_SET_PAGES_ARRAY */
+
 static void __mark_pages_wc(struct azx *chip, struct snd_dma_buffer *dmab, bool on)
 {
 	int pages;
@@ -1870,6 +1926,7 @@
 	azx_dev->opened = 0;
 }
 
+#ifdef HAVE_TIMECOUNTER
 static cycle_t azx_cc_read(const struct cyclecounter *cc)
 {
 	struct azx_dev *azx_dev = container_of(cc, struct azx_dev, azx_cc);
@@ -1948,6 +2005,9 @@
 
 	return 0;
 }
+#else
+#define azx_get_wallclock_tstamp NULL
+#endif
 
 static struct snd_pcm_hardware azx_pcm_hw = {
 	.info =			(SNDRV_PCM_INFO_MMAP |
@@ -2324,6 +2384,7 @@
 			azx_readl(chip, OLD_SSYNC) & ~sbits);
 	else
 		azx_writel(chip, SSYNC, azx_readl(chip, SSYNC) & ~sbits);
+#ifdef HAVE_TIMECOUNTER
 	if (start) {
 		azx_timecounter_init(substream, 0, 0);
 		if (nsync > 1) {
@@ -2340,6 +2401,7 @@
 			}
 		}
 	}
+#endif
 	spin_unlock(&chip->reg_lock);
 	return 0;
 }
@@ -2573,7 +2635,11 @@
 	struct azx_pcm *apcm = snd_pcm_substream_chip(substream);
 	struct azx *chip = apcm->chip;
 	if (!azx_snoop(chip))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
 		area->vm_page_prot = pgprot_writecombine(area->vm_page_prot);
+#else
+		area->vm_page_prot = pgprot_noncached(area->vm_page_prot);
+#endif
 	return snd_pcm_lib_default_mmap(substream, area);
 }
 #else
@@ -3311,6 +3377,7 @@
 static bool check_hdmi_disabled(struct pci_dev *pci)
 {
 	bool vga_inactive = false;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 5, 0)
 	struct pci_dev *p = get_bound_vga(pci);
 
 	if (p) {
@@ -3318,6 +3385,7 @@
 			vga_inactive = true;
 		pci_dev_put(p);
 	}
+#endif
 	return vga_inactive;
 }
 #endif /* SUPPORT_VGA_SWITCHEROO */
@@ -3424,6 +3492,10 @@
 	}
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 31)
+#define AZX_ENABLE_MSI_DEFAULT
+#endif
+
 /*
  * white/black-list for enable_msi
  */
@@ -3441,6 +3513,14 @@
 	{}
 };
 
+#ifndef AZX_ENABLE_MSI_DEFAULT
+static struct snd_pci_quirk msi_white_list[] __devinitdata = {
+	SND_PCI_QUIRK(0x103c, 0x30f7, "HP Pavilion dv4t-1300", 1),
+	SND_PCI_QUIRK(0x103c, 0x3607, "HP Compa CQ40", 1),
+	{}
+};
+#endif
+
 static void check_msi(struct azx *chip)
 {
 	const struct snd_pci_quirk *q;
@@ -3449,7 +3529,11 @@
 		chip->msi = !!enable_msi;
 		return;
 	}
+#ifdef AZX_ENABLE_MSI_DEFAULT
 	chip->msi = 1;	/* enable MSI as default */
+#else
+	chip->msi = 0;	/* disable MSI unless we have in the white list */
+#endif
 	q = snd_pci_quirk_lookup(chip->pci, msi_black_list);
 	if (q) {
 		dev_info(chip->card->dev,
@@ -3458,6 +3542,16 @@
 		chip->msi = q->value;
 		return;
 	}
+#ifndef AZX_ENABLE_MSI_DEFAULT
+	q = snd_pci_quirk_lookup(chip->pci, msi_white_list);
+	if (q) {
+		printk(KERN_INFO
+		       "hda_intel: msi for device %04x:%04x set to %d\n",
+		       q->subvendor, q->subdevice, q->value);
+		chip->msi = q->value;
+		return;
+	}
+#endif
 
 	/* NVidia chipsets seem to cause troubles with MSI */
 	if (chip->driver_caps & AZX_DCAPS_NO_MSI) {
@@ -3479,7 +3573,7 @@
 		if (snoop) {
 			u8 val;
 			pci_read_config_byte(chip->pci, 0x42, &val);
-			if (!(val & 0x80) && chip->pci->revision == 0x30)
+			if (!(val & 0x80) && snd_pci_revision(chip->pci) == 0x30)
 				snoop = false;
 		}
 		break;
@@ -3636,7 +3730,7 @@
 					 PCI_DEVICE_ID_ATI_SBX00_SMBUS,
 					 NULL);
 		if (p_smbus) {
-			if (p_smbus->revision < 0x30)
+			if (snd_pci_revision(p_smbus) < 0x30)
 				gcap &= ~ICH6_GCAP_64OK;
 			pci_dev_put(p_smbus);
 		}
